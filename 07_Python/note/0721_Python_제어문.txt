## 조건문
: 조건식1이 True이면 들어쓰기 한 문장(블록)을  실행, 
조건식1이 False이고 조건식2가 True이면 elif구문을 실행,
모두 False 이면 else구문을 실행

if 조건식1:
	블록1
	블록2
elif 조건식2:
	블록3
else:
	블록4

## 반복문
1.for : 나열 가능한 자료(리스트,튜플,딕셔너리,셋 등)에서 자료를 모두 소비할 때 까지 반복하여 처리
for 변수 in 나열가능한자료:
	변수 값을 처리할 블록1
	변수 값을 처리할 블록2
else:
	변수에 값이  할당되지 않은 경우 실행할 블록
(ex) range 사용가능
for i in range(start, stop, step):
	print(i, end=‘\t’)
start에서 stop앞까지 step만큼 증가하여 반복, 매번 끝에 \t 

2.while : 조건문이 True인 동안 블록을 반복 실행, 조건문 결과가 False이면 else 블록 1회 실행하고 빠져나옴
while 조건문:
	True인 동안 반복할 블록
else:
	 False이면 실행할 블록
(ex) break와 continue 사용가능
num = 0
while num <10:
	num += 1
	if num == 5:
		break
	print(num, end=‘ ’)
결과: 1 2 3 4
 
## 중첩루프
: 2차원 이상 구조의 데이터를 다룰 때 사용
for row in rows:
	바깥 반복문을 처리할 블록
	for data in row:
		안쪽 반복문을 처리할 블록1
		안쪽 반복문을 처리할 블록2
	바깥 반복문을 처리할 블록

2차원 리스트 인덱싱 : 변수명[행][열]
3차원 리스트 인덱싱 : 변수명[면][행][열]
list_2d = [[1,2,3],[11,12,13],[21,22,23]]
list_2d[1][2] => 13

for data in list_2d:
	print(data)
결과: 
[1,2,3]
[11,12,13]
[21,22,23]

for row in list_2d:
	for data in row:
		print(data, end=‘ ’)
	print()
결과: 
1 2 3
11 12 13
21 22 23

# 중첩루프 탈출
1.brake, continue : 파이썬에서 반복문을 제어하는 brake, continue는 가장 안쪽에 있는 루프에만 적용
2.플래그 
3.예외처리
(ex) 예외처리 코드 작성(바깥 반복문에서 안쪽 반복문을 실행시키기 위해)
class BreakOutOfALoop(Exception): pass

for a in range(0, 3):
	try:
		for b in range(1, 3):
			if a==b:
				raise BreakOutOfALoop
			print(a, b)
	except BreakOutOfALoop:
		break
