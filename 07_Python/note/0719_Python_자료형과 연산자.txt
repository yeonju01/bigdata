## 변수
: 프로그램이 실행되는 동안 변하는 값을 저장, 이름을 부여하고 값을 저장
변수선언, 변수할당(연산자 =)

변수 이름 규칙
- 문자, 숫자, 밑줄(_) 포함
- 숫자로 시작 불가
- 대소문자 구분
- 공백, 문장부호, 특수문자 사용불가
- 예약어 사용불가

print() : 출력
id() : 주소 값 출력
del() : 변수 삭제
help() : 도움말

## 입출력
read_message = input(“message”) : 사용자로부터 입력받음(문자열로 입력됨)
 print(“message”, sep=“”, end=“”)

## 자료형
1.기본자료형 : int, float, double, boolean, char, string
파이썬에서는 변수 선언에 자료형 지정하지 않음
- 숫자형 : int(정수), float(실수), complex(복소수; 허수는 j)
- 문자형 : 단일문자와 문자열 구분하지 않음
- 탈출문자 :  /n, /t, /r, /0, \\, \’. \”
- 문자열 연결 : +, ‘ ’(공백으로 연결), *(곱한 숫자만큼 반복)
- 문자열 인덱싱 : “Python”[0]
- 문자열 슬라이싱 : [start:stop:step] start에서 stop앞까지 step번마다 (리스트,튜플 등에서도 사용가능)
- row문자열 : r() 로 문자를 그대로 표현
- 논리형 : True, False
False로 판단 : None, -, ‘’, (), [], {}
True로 판단 : False가 아닌 모든 경우, 널문자(\0), 공백(‘ ’)
- 자료형 확인 : type()
- 자료형 변환 : int(), isinstance(변수명,타입명)

## 포맷팅
: 문자, 숫자, 날짜 데이터에 형식을 지정
이전 스타일 : ‘%s %s’ % (‘one’, ‘two’)
새로운 스타일 : ‘{} {}’.format(‘one’, ‘two’)

‘{[인덱스]:[공백대체문자][정렬방법][자릿수][타입]}’.format(변수명)
1. <(왼쪽정렬), >(오른쪽정렬), ^(가운데정렬)
2. s(문자열), d(10진수), f(실수), b(2진수), o(8진수), x(16진수)
3. format()함수의 인수를 이용해 포맷형식 지정 가능
4. 날짜 출력 : %Y(연도), %m(월), %d(일), %H(시간), %M(분), %S(초)
(ex) 
print(‘출력 : {2}, {1}, {0}).format(10, 20, 30))
출력 : 30, 20, 10
(ex) a = 123
print(‘출력 : [{:*=10}]. [{:*=+010}]. [{:*>+010}]’.format(a, a, a))
출력 : [*******123]. [+******123]. [******+123]
(ex)
print(‘출력 : [{:{dir}{sign}{}.{}}]’.format(a, 10, 3, dir=‘>’, sign=‘+’))
출력 : [     +2.72]
(ex) 
print(‘출력 : {:%Y-%m-%d-%H-%M}’.format(datetime(2001, 2, ,3, 4, 5)))
출력 : 2001-02-03 04:05

## 연산자
1. 산술 연산자 : + - * / //(몫) %(나머지) **(제곱)
2. 대입 연산자 : = (+=, -=, *=, **=, /=, //=, %= 등)
3. 논리 연산자 : &(AND), |(OR), and(AND), or(OR), not(NOT)
4. 비교 연산자 : <, <=, ==, >=, >, !=
5. 비트 연산 : a&b(모두 1이면 1), a|b(하나이상 1이면 1), a^b(두 비트가 같으면 1), ~a(NOT연산; 0은 1로 1은 0으로), a>>n, a<<n

## 문자열 다루기
“” ‘’ : 문자열을 생성
+ : 문자열 연결
len(‘문자열’) : 문자열 길이 반환
[start: stop :step] : start부터 stop전까지 step마다 반환
split(‘delimiter’) : 문자열을 delimiter로잘라 리스트로 반환
‘delimiter’.join([“str1”, ...]) : 문자열 리스트를 delimiter로 연결
capitalize() : 첫문자를 대문자로 나머지문자를 소문자로 바꿈
upper, lower() : 문자열을 모두 대문자, 소문자로 바꿈
startswith(), endswith() : 특정 문자로 시작하는지, 끝나는지를 식별해서 논리(True/False)값을 반환
find(), index() : 특정 문자의 인덱스를 반환
isalnum(), isalpha(), isnumeric(), isdecimal() : 문자열이 숫자인지 문자인지 판별
replace(old, new) : old문자를 new문자로 치환
