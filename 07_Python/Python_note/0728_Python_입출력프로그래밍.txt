## 파일 입출력 프로그래밍
file_pointer = open(file_name, mode, encoding='ASCII')

f = open('sample.txt', 'w') # 파일을 쓰기모드로 열기
print(f.writable()) # 쓰기모드 확인 (True반환)
f.write("Hello\n") # 파일 쓰기
f.close() # 파일 닫기

f = open('sample.txt', 'a') # 파일을 추가 쓰기모드로 열기
print('프린트 함수로 쓸 수 있습니다', file=f) # file로 지정하면 저장가능
f.close() # 파일 닫기

f = open('sample.txt', 'r') # 파일을 읽기모드로 열기
lines = f.readlines()
For line in lines:
	print(line.strip()) # 파일의 모든 라인을 읽고 strip으로 공백제거
f.close() # 파일 닫기

## 피클링
: 파이썬 객체 계층구조가 바이트 스트림으로 변환

(ex)피클링
class Member: # 고객정보 저장 클래스
	def __init__(self, name, age, address):
 		self.name = name
		self.age = age
		self.address = address
	def __str__(self):
		return “Name:{}, Age:{}, Address:{}”.format(self.name,self.age,self.address)

user1 = Member(‘홍길동’, ’20’, ‘서울시 강동구’)
user_list = [user1] # 파일로 저장할 고객정보의 리스트객체들

f = open('member.data', 'wb') # 피클링(바이너리모드로 열기)
import pickle
pickle.dump(user_list, f)
f.close()

(ex)언피클링
del user_list
import pickle
f = open(‘member.data’, ‘rb’) # 언피클링(바이너리모드로 열기)
user_list = pickle.load(f)

for user in user_list:
	print(user)
f.close()
결과: 
Name:홍길동, Age:20, Address:서울시 강동구

## CSV로 읽기/쓰기
: csv모듈이 파이썬 기본라이브러리에 포함되어있음, reader() writer()이용

(ex)CSV 파일 읽기 (auotechar=‘ ’’ ’, quoting=csv.QUORE_NONNUMERIC는 자동형변환을 위한 딕셔너리 인수)
Import csv
with open(‘member1.csv’, ‘r’, encoding=‘UTF-8’) as csvfile:
	r = csv.reader(csvfile, auotechar=‘ ’’ ’, quoting=csv.QUORE_NONNUMERIC)
	for row in r:
		print(row)

(ex)CSV 파일 쓰기
user_list = [[‘홍길동’, 20.2, ‘서울시 강동구’],
		[‘마길동’, 25.0, ‘서울시 강서구’]]
Import csv
with open(‘member2.csv’, ‘w’, newline=‘’, encoding=‘UTF-8’) as csvfile:
	w = csv.writer(csvfile, quoting=csv.QUORE_NONNUMERIC)
	w.writerows(user_list)
결과:
‘홍길동’, 20.0, ‘서울시 강동구’
‘마길동’, 25.0, ‘서울시 강서구’

(ex)CSV 파일 읽기2 : DictReader사용하여 딕셔너리 형식으로 불러오기 DictReader
import csv
with open(‘member3.csv’, encoding=‘UTF-8’) as csvfile:
	dict_reader = csv.DictReader(csvfile, fieldnames=[“Name”, “Age”, “Address”], restkey=“Etc”,  restval=“데이터없음”)
	# csv파일에 헤더가 없을 경우 fieldnames로 각 필드 이름 지정
	# restkey로 남는 데이터 저장
	# 지정한 필드의 수보다 값이 적은 경우 restval값으로 저장
	for row in dict_reader:
		print(row[“Name”], row[“Age”], row[“Etc”]) #헤더정보로 읽어옴
결과:
홍길동 20 서울시 강동구
마길동 25 서울시 강서구

(ex) 딕셔너리 형식 쓰기 DictWriter
user1 = {“Name”:”홍길동”, “Age”:20, “Email” :”k@hong.com”}
import csv
with open(‘member4.csv’, encoding=‘UTF-8’) as csvfile:
	filenames = [“Name”, “Age”, “Address”]
		dict_writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
		dict_writer.writeheader()
		dict_writer.writerow(user1)
결과 : 
Name,Age,Email
홍길동,20,k@hong.com

## JSON 데이터 저장/불러오기
: dump()함수로 파이썬 객체를 JSON형식으로 변환

(ex)JSON형식 저장
class Member:
	def __init__(self, name, address)
		self.name = name
		self.address = address
	def as_dict(self): # 딕셔너리 형식으로 변경
		return{“name”:self.name, “address”:self.address}

user1 = Member(‘홍길동’, 20, ‘서울시 강동구’)
user2 = Member(‘홍길서’, 20, ‘서울시 강서구’)
user_list = [user1, user2]

import json
with open(‘member.json’, ‘w’, encoding=‘UTF-8’) as jsonfile: # json으로 저장
	json.dump(user_list, jsonfile, ensure ascii=False, 
				indent=“\t”, default = Member.as_dict) # \t로 정렬된 딕셔너리 직렬화 indent=True도 가능

(ex)JSON형식 불러오기
class Member:
	def __init__(self, name, address)
		self.name = name
		self.address = address
	def __str__(self): # 읽기 형식 지정
		return “Name:{}, Age:{}, Address:{}”.format(self.name, self.address)
	def as_dict(cls): 
		return{“name”:cls.name, “age”:cls.age,  “address”:cls.address}

def as_member(dct):
	return Member(dct[“name”], dct[“address”])

import json
with open(‘member.json’, encoding=‘UTF-8’) as jsonfile:
	user_list = json.load(jsonfile, object_hook=as_member) # object_hook 역직렬화
	for user in user_list:
		print(user)
결과:
Name:홍길동, Age:20, Address:서울시 강동구
Name:홍길서, Age:20, Address:서울시 강서구

## HDF5파일 읽기/쓰기
: 고성능 데이터 소프트웨어 라이브러리 HDFView 전용뷰어로 볼 수 있음
Pandas패키지 사용 h5py모듈의 File클래스 이용

import seaborn as sys
iris_df = sns.load_dataset(‘iris’)
iris_dic = iris_df.to_dict()
print(iris_dic[‘sepal_length’])
결과: 150개의 sepal_length 데이터셋

(ex)HDF 포맷 저장
import h5py
with h5py.File(‘iris.h5py’, ‘w’) as f:
	for group, v in iris_dic.items():
		grp = f.create_group(group)
		for k, data in v.items():
			grp.create_dataset(str(k), data=data)

(ex)HDF 포맷 불러오기
import h5py
iris_dic = {}
with h5py.File(‘iris.h5py’, ‘r’) as f:
	for group, v in iris_dic.items():
		cols = {}
		for k, data in v.items():
			cols.update({int(k):data.value})
		iris_dic.update({group: cols})

(ex) Pandas를 이용한 HDF5 파일 입출력
import pandas as pd
iris_df = pd.DataFrame(iris_dic)
iris_df.to_hdf(‘iris2.hdf5’, key=‘iris’)

iris_df2 = pd.read_hdf(‘iris2.hdf5’, key=‘iris’)
iris_df2.head()
결과: 데이터프레임 형식의 iris데이터 5줄

