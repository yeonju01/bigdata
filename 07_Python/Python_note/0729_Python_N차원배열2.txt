## 넘파이 배열 합치기/분리하기
1.인덱싱 : 양수인덱스, 음수인덱스로 인덱싱 가능(a[2], a[-1], …)
np_array_obj[축1인덱스. 축2인덱스. 축3인덱스] # [차원,행,열]
(ex)축 인덱스 생략
a[-1] # 축 수보다 적은 수의 인덱스 제공 시 누락된 인덱스의 모든 항목 선택
a[0, …]

2.슬라이싱
np_array_obj[start: stop: step] # start부터 stop까지 step마다 (stop포함하지 않음)

3.합치기
hstack() : 배열을 옆으로 추가
vstack() : 배열을 아래로 추가
dstack() : 3번째 축을 쌓아 합침
column_stack() : 1차원 배열들을 열 단위로 배열하여 2차원 배열로 만듬 
newaxis() : 2차원 컬럼 벡터로 변환
stack() : axis의 값에 따라 배열을 합침, 새 축의 인덱스 지정 필요

r_[] : 행 축을 따라 배열 생성 (ex) np.r_[[a],[b],[c]]
c_[] : 열 축을 따라 배열 생성 (ex) np.c_[a,b,c]

4.분할하기 
- hsplit(), vsplit(), dsplit()
- split() ; axis파라미터 사용
- array_split() ; indices_or_sections 사용가능(축을 똑같이 나누지 않는 적당한 정수로 자동지정)

(ex)
c = np.arrange(12).reshape(2,2,3)
c
결과:
array([[0, 1, 2],
	   [3, 4, 5],

	   [6, 7, 8],
	   [9, 10, 11]])
c_hsplit = np.hsplit(c, 3) # np.split(axis=1)
c_hsplit
결과:
array([[0, 1, 2],
	   [6, 7, 8]])
array([[3, 4, 5],
	   [9, 10, 11]])

(ex) 인덱스 목록을 지정하여 나누기
array([[0, 1, 2, 3],
	   [4, 5, 6, 7]])
a_hsplit = np.hsplit(a, (2,3)) # 인덱스를 기준으로 나누기 (2번,3번 인덱스)
a_hsplit[0]
결과:
array([[0, 1],
	   [4, 5]])
a_hsplit[1]
결과:
array([[2],
	   [6]])

5.복사와 뷰
- 단순 할당 : 배열 객체나 데이터의 사본을 만들지 않음
- 뷰(view) : 얕은 복사, 모양이 다르지만 동일한 데이터
- copy() : 깊은복사, 배열 및 데이터의 전체 복사본 생성
(ex)
b = a.copy()
b is a
결과 : False

6.인덱스 배열로 인덱싱
(ex)넘파이 배열을 이용하여 인덱싱 - 이미지 저장
palette = np.array([[0,0,0],
			        [255,255,255]])
image_index = np.array([[0,1,1,1,0,0,1,1,1,0],
					 [0,1,1,1,0,0,1,1,1,0]])
image_data = palette[image_index] 

from matplotlib import peplos as pat
%matplotlib inline
put.imshow(image_data, interpolation=’nearest’)
put.show()

(ex)다차원 인덱싱 - 최댓값 검색
data = np.sin(np.arange(20)).reshape(5,4)
ind = data.argmax(axis=0) # 최댓값이 있는 행의 인덱스
data_max = data[ind, range(data.shape[1])] # 다차원 인덱싱 사용
data_max

(ex)인덱싱을 이용한 값 변경
a = np.arange(5)
a[[1,3,4]] = 0
a
결과: array([0,0,2,0,0])

(ex)부울 배열을 이용한 인덱싱 - 논리배열 인덱스 사용
a = np.arange(20).reshape(4,5)
b = a %2 ==0 # 각 요소마다 True, False반환
a[b] = a[b]**2 # True인 요소에 제곱값을 넣음
결과:
array([[0, 1, 4, 3, 16],
	   [5, 36, 7, 64, 9],
	   [100, 11, 144, 14, 196],
	   [15, 256, 17, 324, 19]])

(ex) ix_() 함수 : 1차원을 제외한 모든 차원이 1인 결과 반환
a = np.array([2,3])
b = np.array([8,5,4])
ax,bx = np.ix_(a,b)
ax
결과:
array([[2],
	   [3]])
bx
결과: array([[8,5,4]])

7.배열 조작
np.linalg.inv(x) : 역행렬
np.eye(n) : 단위행렬
np.trace(x) : 대각합
np.linalg.solve(a,b) : 연립방정식 해 풀기
np.diag(x) : 대각행렬
np.dot(a,b) : 내적 
