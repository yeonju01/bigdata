## pandas(판다스)
: 데이터 전처리를 위한 기능 제공(부분집합 조회, 열 추가와 제거, 데이터구조 변경, 결측치 처리 등)
시리즈 : 1차원 구조, 시계열 데이터를 표현하기 위한 데이터구조, 데이터프레임의 열 하나
데이터프레임 : 2차원(행,열) 구조, 테이블형식의 이종모음으로 구조화 된 데이터

## 데이터프레임 만들기
(ex) 딕셔너리 이용하여 데이터프레임 생성 : 키가 열 이름이 됨
import pandas as pd
d=[{‘col1’:1 ’ col2’:3}, {‘col1’:2}]
df = pd.DataFrame(data=d)
df
결과: 데이터프레임
	col1		col2
0	1		3.0
1	2		NaN

(ex) 리스트 이용하여 데이터프레임 생성 : 딕셔너리 값 지정 or 열단위 결합 후 이름 지정
a = [1,2]
b = [3,4]
# df = pd.DataFrame({‘col1’:a, ‘col2’:b})
df = pd.DataFrame(np.c_[a, b], columns=[‘col1’, ‘col2’])
df
결과: 데이터프레임
	col1		col2
0	1		3
1	2		4

(ex) CSV 불러와서 데이터프레임 생성
import pandas as pd
member_df = pd.read_csv(“member_data.csv”, sep=“, skiprows=[0,2], comment=‘#’)
결과: 0열(헤더)과 2열, #내용 제외한 데이터프레임 형식의 member_data

(ex) sklearn.datasets 모듈 데이터(딕셔너리 형식)를 데이터프레임으로 변환
import numpy as np
import pandas as pd
from sklearn import datasets
iris = datasets.load_iris()
x = pd.DataFrame(iris.data. columns=iris.feature_names) # 독립변수
y = pd.DataFrame(iris[‘target_names’][iris[‘target’]], columns=[’species’]) # 종속변수
iris_df = pd.concat([x,y], axis=1) # concat
iris_df.head()

## 부분 데이터 조회
(ex) 열 이름으로 조회
member_df.Name
member_df[‘Name’]

iris_df.columns = [’sepal_length’, ‘sepal_width’, ’petal_length’, ‘petal_width’, ‘species’] # 열 이름 지정
member_df.columns # 열 이름 확인

(ex) loc 으로 조회
member_df.loc[0:2, ‘Name’:’Email’] # 0~2행 Name~Email열 슬라이싱
member_df.loc[[0,2], [‘Name’,’Email’]] # 리스트로 찾기; 0,2행 Name,Email열

(ex) iloc 으로 조회
member_df.iloc[0:3, 0:3] # 0~3행 0~3열
member_df.iloc[::-1] # 내림차순

(ex) 조건으로 조회
import statsmodels.api as sm
iris = sm.datasets.get_rdataset(‘iris’, package=‘datasets’) 
iris_df = iris.data # get_rdataset()로 불러온 데이터의 data는 데이터를 담고있는 데이터프레임
iris_df.loc[iris_df[’Species’]==‘setosa’, 
		[’Sepal.Length’, ’Species’]].head() # 행 조건에 맞는 지정한 열 반환 
결과 : setosa의 Sepal.Length,Species 데이터
iris_df.loc[(iris_df[’Species’]==‘setosa’) &
		(iris_df[’Sepal.Length’].astype(float) > 6.5)].head() ; 
결과 : setosa의 Sepal.Length가 6.5이상인 데이터

## 데이터 추가, 삭제
(ex) 행, 열, 데이터 삭제
member_df = member_df.drop(‘북’) # (기본값: axis=0) ‘북’ 행 삭제
member_df = member_df.drop(‘주소’, axis=1) # ‘주소’ 열 삭제

member_df.drop(labels=[‘Email’, ‘Address’], axis=‘columns’, inplace=True) # ‘Email’, ‘Address’ 열 삭제, inplace=True로 재할당

(ex) 열 추가
member_df[‘BirthYear’] = [2001, 2002, 2003, None] # BirthYear 열 추가
member_df[‘BirthYear’] = pd.Series([2001, 2002, 2003), index=[0,1,3]) # 시리즈로 열 추가

(ex) 딕셔너리로 행 추가
new_member = {’Name’:’이순신’, ‘Age’:30, 
				‘Email’:’hong@h.com’, ‘Address’:’서울시 마포구’} # 딕셔너리 생성
new_df = member_df.append(new_member, ignore_index=True) 

(ex) 시리즈로 행 추가
new_list = [‘파이썬’, 23, ‘python@h.com’, ’서울시 마포구’]
new_series = pd.Series(new_list, index=member_df.columns) # 시리즈 생성
new_df = member_df.append(new_series, ignore_index=True)

## 정렬
member_df.sort_index() # 행 이름으로 정렬
member_df.sort_index(axis=1) # 열 이름으로 정렬
member_df.sort_values(by=[‘Email’]) # Email 값을 기준으로 정렬

(ex) level로 정렬
member_df.index = [[‘좌우’, ‘좌우’, ‘상하’, ‘상하’], [‘동’, ‘서’, ‘남’, ‘북’]]
member_df.index.names = [‘위치구분’, ‘상세위치’]
member_df.sort_index(level=[‘위치구분’]) # [‘상하’, ‘좌우’] 순서로 정렬
